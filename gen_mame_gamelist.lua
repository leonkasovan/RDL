-- Lua script for generating MAME Gamelist
-- Input File: MAME XML generated by command : mame -listxml > mame0267.xml (can be downloaded from MAME's github too)
-- lua5.1 gen_mame_gamelist.lua > db/mame.gamelist.txt

local lxp = require("lxp")

-- Variables to store the extracted data
local current_machine = nil
local print_header = true

-- Handlers for the SAX parser
local callbacks = {
    StartElement = function(parser, name, attrs)
        if name == "machine" then
            current_machine = {
                name = attrs.name or "",
                cloneof = attrs.cloneof or "",
                description = "",
                year = "",
                players = "",
                manufacturer = "",
                status = ""
            }
        elseif name == "description" and current_machine then
            current_machine.in_description = true
        elseif name == "year" and current_machine then
            current_machine.in_year = true
        elseif name == "manufacturer" and current_machine then
            current_machine.in_manufacturer = true
        elseif name == "driver" and current_machine then
            current_machine.status = attrs.status or ""
        elseif name == "input" and current_machine then
            current_machine.players = attrs.players or ""
        end
    end,
    EndElement = function(parser, name)
        if name == "machine" and current_machine then
            -- Check filters: status should be "good" and players not equal "0"
            if #current_machine.year ~= 0 then
                local desc = ""
                -- Output the extracted data for the current machine
                if print_header then
                    print("1.Name|2.Full Name|3.Description")
                    print_header = false
                end
                if current_machine.status ~= "good" then
                    desc = desc.."/"..current_machine.status
                end
                if #current_machine.cloneof ~= 0 then
                    desc = desc.." parent:"..current_machine.cloneof
                end
                print(string.format('%s|%s|%s/%s-players/%s%s',
                    current_machine.name,
                    current_machine.description:gsub('|', ''), -- Strip |
                    current_machine.manufacturer,
                    current_machine.players,
                    current_machine.year,
                    desc
                ))
            end
            current_machine = nil
        elseif name == "description" and current_machine then
            current_machine.in_description = false
        elseif name == "year" and current_machine then
            current_machine.in_year = false
        elseif name == "manufacturer" and current_machine then
            current_machine.in_manufacturer = false
        end
    end,
    CharacterData = function(parser, data)
        if current_machine then
            if current_machine.in_description then
                current_machine.description = current_machine.description .. data
            elseif current_machine.in_year then
                current_machine.year = current_machine.year .. data
            elseif current_machine.in_manufacturer then
                current_machine.manufacturer = current_machine.manufacturer .. data
            end
        end
    end
}

-- Create a new parser
local parser = lxp.new(callbacks)

-- Read and parse the XML file
local filename = "db/mame0267.xml"
local file = io.open(filename, "r")
if not file then
    error("Could not open file: " .. filename)
end

-- Process the XML file line by line
local buffer_size = 1024 * 1024 -- 1MB buffer size for reading file in chunks
while true do
    local chunk = file:read(buffer_size)
    if not chunk then break end
    assert(parser:parse(chunk))
end

assert(parser:parse()) -- Signal end of document
parser:close()
file:close()
